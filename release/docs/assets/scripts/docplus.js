/** * @author  */var Application = {		// 配置		options: {				sidebarWidth: 200			},		loadOptions: function(){		Application.options = LocalStorage.getJSON('docOptions') || Application.options;	},		saveOptions: function(){		LocalStorage.setJSON('docOptions', Application.options);	},		// 界面		updateSplitter: function(sidebarWidth){		Dom.get('sidebar').setWidth(sidebarWidth - 10);		Dom.get('splitter').setOffset({x: sidebarWidth - 3});		Dom.get('content').setWidth(document.getSize().x - sidebarWidth - 12);		Application.options.sidebarWidth = sidebarWidth;	},		/**	 * 当窗口更改大小之后，刷新页面布局。	 */	updateLayout: function(){		var height = document.getSize().y - Dom.get('header').getSize().y;		Dom.get('splitter').setHeight(height);		height -= 10;		Dom.get('doctree').setHeight(height - Dom.get('sidebar-toolbar').getSize().y - 16);				Dom.get('content').setHeight(height);		Application.updateSplitter(Application.options.sidebarWidth);	},		// 选项卡		tabs: {},		tabCount: 0,		TabPage: Class({				constructor: function(name, options){			this.name = name;			var title = this.title = options.title || name || '　';			this.header = Dom.create('li');			Dom.create('a', 'x-closebutton')				.setAttr('href', 'javascript://关闭 ' +title)				.setText('×')				.on('click', this.close, this)				.appendTo(this.header);							Dom.create('a')				.setAttr('href', '#' + name)				.setAttr('title', title)				.setText(title)				.appendTo(this.header);							this.header.on('mouseup', this.onHeaderMouseUp, this);			this.header.on('contextmenu', this.onHeaderContextMenu, this);			Dom.get('tabs').append(this.header);						this.content = this.initContent(options);			Dom.get('content').append(this.content);			Application.tabCount++;			Application.relayoutTab();		},				initContent: function(options){			return Dom.create('div', 'content').setHtml(this.name);		},				onHeaderMouseUp: function(e){						switch(e.which){								// // 鼠标左键。
				// case 1:
					// this.active();
					// break;									// 鼠标中键。				case 2:					e.stop();					this.close();					break;			}					},				active: function () {						var currentTabPage = Application.currentTab;						if(currentTabPage) {								if(currentTabPage === this)					return;									currentTabPage.deactive();				currentTabPage.nextTabPage = this;				this.previousTabPage = currentTabPage;							}						this.header.addClass('selected');			this.content.show();						Application.currentTab = this;		},				deactive: function () {			this.header.removeClass('selected');			this.content.hide();
		},				updateTitle: function(maxLength){			var title = this.title;			this.titleLabel.setText(String.ellipsis(title, maxLength));			 maxLength;		},				onHeaderContextMenu: function(e){			this.active();			var menu = new ContextMenu();			menu.items.add('aa').on('click', function(){alert('a')});			menu.showAt(e.pageX, e.pageY);			e.stop();		},				close: function(){						var p = this.previousTabPage, n = this.nextTabPage;									this.header.remove();			this.content.remove();						if(n)				n.previousTabPage = p;						if(p){				p.nextTabPage = n;			} 						if(Application.currentTab === this){				Application.currentTab = null;				p && p.active();			}						delete Application.tabs[this.name];									Application.tabCount--;			Application.relayoutTab();		}			}),		closeOtherTabs: function(){		for(var i in Application.tabs){			var t = Application.tabs[i];			if(t !== Application.currentTab){				t.close();				}		}	},		relayoutTab: function(){		//Application.tabCount++;	},		openTab: function(name, options){		var tabPage = Application.tabs[name];		if(!tabPage){			Application.tabs[name] = tabPage = new Application.TabPage(name, options);		}				tabPage.active();	},		// 初始化		init: function(){				Application.loadOptions();		Application.initLayout();		Application.initEvents();			},		/**	 * 初始化 splitter 的拖动事件。
	 */	initSplitter: function(){		var draggable = new Draggable(Dom.get('splitter'));				draggable.onDragStart = function (e) {
			this.target.addClass('x-splitter-proxy');			return true;
		};				draggable.onDrag = function () {			this.to.y = this.from.y;			this.to.x = Math.min(1000, Math.max(150, this.to.x));			return true;		};				draggable.onDragEnd = function () {			Application.updateSplitter(this.to.x);			this.target.removeClass('x-splitter-proxy');			return true;		};	},		/**	 * 初始化左右布局。
	 */	initLayout: function(){		var opt = Application.options;				Application.initSplitter();		Application.updateLayout();		Application.reload();			},		initEvents: function(){		var win = new Dom(window);		win.on('unload', Application.saveOptions);		win.on('hashchange', Application.reload);		win.on('resize', Application.updateLayout);	},		// 页面		reload: function(){		Application.navigate(location.getHash());	},		navigate: function(href){			}};Dom.ready(Application.init);